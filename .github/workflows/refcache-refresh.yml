name: Refcache refresh
# cSpell:ignore otelbot

# Creates (or updates) the PR that refreshes a number of the oldest refcache
# entries. We say "the PR", because there can be at most one such PR at a time.
# We refresh by first pruning the oldest N entries, then running the link
# checker to update the refcache. N is set via the workflow_dispatch input.
#
# If the PR branch already exists, then by default we only rebase from `main`.
# To force further pruning of the existing PR branch, invoke with
# `prune_more_in_same_PR` is true.
#
on:
  schedule:
    - cron: '33 9 * * *' # daily at 9:33 UTC
  workflow_dispatch:
    inputs:
      number_of_entries_to_refresh:
        description: Number of (oldest) refcache entries to refresh.
        default: 128
        type: number
      prune_more_in_same_PR:
        description: Prune more entries from existing PR branch (if any).
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  refcache-refresh:
    runs-on: ubuntu-latest
    env:
      BRANCH: otelbot/refcache-refresh
      IS_NEW_BRANCH: 'false'
      REFRESH_COUNT: ${{ github.event.inputs.number_of_entries_to_refresh }}
      PRUNE_MORE: ${{ github.event.inputs.prune_more_in_same_PR }}
    steps:
      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        id: otelbot-token
        with:
          # the higher privileged docs token is needed to push commits to an existing PR
          app-id: ${{ vars.OTELBOT_DOCS_APP_ID }}
          private-key: ${{ secrets.OTELBOT_DOCS_PRIVATE_KEY }}

      - uses: actions/checkout@v5
        with:
          # this is needed to do the rebase below
          fetch-depth: 0
          # this is needed to trigger workflows when pushing new commits to an existing PR
          token: ${{ steps.otelbot-token.outputs.token }}

      - name: Checkout or create branch
        run: |
          if ! git ls-remote --exit-code --heads origin $BRANCH; then
            git checkout -b $BRANCH origin/main
            git push -u origin $BRANCH
            echo "IS_NEW_BRANCH=true" >> $GITHUB_ENV
            echo "PRUNE_N=$REFRESH_COUNT" >> $GITHUB_ENV
          else
            git checkout $BRANCH
            echo "PRUNE_N=\"1 --list\"" >> $GITHUB_ENV

            PR_URL=$(gh pr view --json url --jq '.url')
            echo "PR_URL=$PR_URL"
          fi

      - name: Use CLA approved github bot
        run: |
          git config user.name otelbot
          git config user.email 197425009+otelbot@users.noreply.github.com

      - name: Merge from main
        run: |
          previous=$(git rev-parse HEAD)
          git fetch origin
          git merge origin/main
          if [ "$(git rev-parse HEAD)" != "$previous" ]; then
            git push
          fi

      - uses: actions/setup-node@v5
        with:
          node-version-file: .nvmrc

      - run: npm install --omit=optional

      - name: Prune refcache
        if: ${{ env.PRUNE_MORE == 'true' || env.IS_NEW_BRANCH == 'true' }}
        run: |
          echo "List the oldest entry"
          npm run _refcache:prune -- --list -n 1
          echo "Pruning $PRUNE_N oldest refcache entries"
          npm run _refcache:prune -- -n $PRUNE_N

      - name: List the oldest entry
        run: npm run _refcache:prune -- --list -n 1

      - name: Update refcache
        run: |
          # Ignore link-check failures so we can still commit refcache updates
          npm run fix:refcache || true
          # Prune 404 entries, if any
          npm run _refcache:prune

          git add -A

          if ! git diff-index --quiet --cached HEAD; then
            git commit -am "Update refcache"
            git push
          fi

      - name: Create PR if needed
        env:
          GH_TOKEN: ${{ steps.otelbot-token.outputs.token }}
        run: |
          prs=$(gh pr list --state open --head $BRANCH)
          if [ -z "$prs" ]; then
            gh pr create --title "Refresh refcache" \
                         --body "- Refreshes the oldest ${{ env.REFRESH_COUNT }} refcache entries." \
                         --draft
            PR_URL=$(gh pr view --json url --jq '.url')
            echo "PR created: $PR_URL"
          else
            echo "PR already exists: $prs"
          fi
