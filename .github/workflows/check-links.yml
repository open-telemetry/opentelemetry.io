name: Links

# cSpell:ignore minisearch otelbot
on:
  merge_group:
  pull_request:

permissions:
  contents: read

env:
  CHANGED_FILES:
  PR_NUM: ${{ github.event.pull_request.number }}
  USER_EMAIL: 197425009+otelbot@users.noreply.github.com
  USER_NAME: otelbot

jobs:
  # Build site first because htmltest checks the generated HTML files
  build:
    name: BUILD
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Create NPM cache-hash input file
        run: |
          mkdir -p tmp
          jq '{devDependencies, dependencies, engines, gitHubActionCacheKey}' package.json > tmp/package-ci.json

      - name: Create and use reduced-dependencies package.json
        run: |
          jq '.devDependencies |= with_entries(
                  select(.key | test("prefix|hugo|css"))
                )
                | .dependencies |= with_entries(
                  select(.key | test("minisearch")))
                | del(.optionalDependencies)' \
            package.json > tmp/package-min.json
          cp tmp/package-min.json package.json

      - uses: actions/setup-node@v5
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: tmp/package-ci.json

      - run: |
          npm install --omit=optional
          git restore package.json

      - name: Git submodules properly pinned?
        run: |
          npm run seq pin:submodule
          echo "If the diff check below fails, then update .gitmodules by pinning the named git"
          echo "submodule(s); or undo the submodule update(s) if it happened by mistake."
          npm run _diff:fail

      - name: Build the site
        run: npm run log:build
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            public/
            tmp/build-log.txt
            tmp/package*.json

  check-links:
    name: CHECK LINKS (${{ matrix.shard.id }})
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard:
          # Each entry in this list is a shard, with:
          #  id: identifier for the shard (used in job name and artifact name)
          #  regex: regex to add to IgnoreDirs in .htmltest.yml for this shard
          #
          # Each shard ignores a subset of locale directories, so that all shards
          # together cover all locale directories but each shard checks fewer links.
          - id: en
            regex: '^../' # Ignore all locale directories. This works because
            # English docs folders have more than two characters in their names
          - id: locales-A-to-M
            # Regex to ignore English doc folders and locales n to z.
            regex: '^(..[^/]|[n-z]./)'
          - id: locales-N-to-Z
            # Regex to ignore English doc folders and locales a to m.
            regex: '^(..[^/]|[a-m]./)'
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with: { name: build-artifacts }

      - uses: actions/setup-node@v5
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: tmp/package-ci.json

      - name: Update htmltest config with shard IgnoreDirs regex
        run: |
          perl -i -ne 'print; print "  - ${{ matrix.shard.regex }}\n" if /^IgnoreDirs:/' .htmltest.yml
          cat .htmltest.yml

      # This is probably not needed in this job
      - name: Install dependencies
        if: false
        run: |
          cp tmp/package-min.json package.json
          npm install --omit=optional
          git restore package.json

      - run: |
          npm run log:__check:links
          git restore .htmltest.yml
          # Capture any changes to refcache.json etc
          CHANGED_FILES=$(git status --porcelain)
          echo "CHANGED_FILES=$CHANGED_FILES" >> "$GITHUB_ENV"
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          name: refcache-${{ matrix.shard.id }}
          path: |
            static/refcache.json
            tmp/*log.txt

      - name: Push changes if any, and fail check (DISABLED)
        if: ${{ env.CHANGED_FILES }}
        run: |
          echo "Changes detected in the refcache etc:"
          git status --short

          echo 'cmd: gh pr checkout $PR_NUM -b "pr-check-links-${RANDOM}"'
        #   git branch -v

        #   git config --local user.email "$USER_EMAIL"
        #   git config --local user.name "$USER_NAME"
        #   git add -A
        #   git commit -m "Updates from build-and-check-links workflow"

        #   echo "\nPushing changes to PR."
        #   current_branch=$(git rev-parse --abbrev-ref HEAD)
        #   echo current_branch=$current_branch
        #   # gh pr checkout sets some git configs that we can use to make sure
        #   # we push to the right repo & to the right branch
        #   remote_repo=$(git config --get branch.${current_branch}.remote)
        #   echo remote_repo=$remote_repo
        #   remote_branch=$(git config --get branch.${current_branch}.merge)
        #   echo remote_branch=$remote_branch
        #   git push ${remote_repo} HEAD:${remote_branch}

        #   echo "Failing workflow so that changes can be reviewed, and checks rerun."
        #   exit 1
        # env:
        #   GH_TOKEN: ${{ steps.otelbot-token.outputs.token }}

  check-refcache:
    name: REFCACHE updates?
    needs: check-links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          pattern: refcache-*
          path: tmp/check-refcache
      - run: ls -lR tmp
      - name: Does the refcache need updating?
        run: .github/workflows/scripts/check-refcache.sh

  check-build-log-for-issues:
    name: WARNINGS in build log?
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with: { name: build-artifacts }
      - run: cat tmp/build-log.txt
      - run: scripts/check-build-log.sh
