name: PR actions
# cSpell:ignore esac htmltest refcache nvmrc opentelemetrybot

on:
  issue_comment:
    types: [created]

env:
  COMMENT: ${{ github.event.comment.body }}
  PR_NUM: ${{ github.event.issue.number }}
  USER_EMAIL: 107717825+opentelemetrybot@users.noreply.github.com
  USER_NAME: opentelemetrybot

jobs:
  pr-action:
    name: Run PR action
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/fix:')
    permissions:
      contents: write
      pull-requests: write

    env:
      DEPTH: --depth 999 # submodule clone depth

    steps:
      - name: Context info
        run: |
          echo $PR_NUM
          echo $COMMENT

      - uses: actions/checkout@v4

      - name: Extract action name
        id: extract_action_name
        run: |
          PR_ACTION=$(echo $COMMENT | grep -oP '/fix:\K[:-_0-9a-z]+')
          echo "Action is $PR_ACTION"
          ACTION_NAMES="all|dict|expired|filenames|format|htmltest-config|i18n|markdown|refcache(:refresh)?|submodules?|text"
          if [[ ! "$PR_ACTION" =~ ^($ACTION_NAMES)$ ]]; then
            echo "Invalid action name: $PR_ACTION"
            echo "Action name should be one of: $ACTION_NAMES"
            exit 1
          fi
          echo "PR_ACTION=$PR_ACTION" >> "$GITHUB_ENV"

      - name: Write start comment
        run: |
          gh pr comment $PR_NUM -b "You triggered fix:${PR_ACTION} action run at $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}

      - run: gh pr checkout $PR_NUM -b "pr-action-${RANDOM}"
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}

      - name: Create NPM cache-hash input file
        run: |
          mkdir -p tmp
          jq '{devDependencies, dependencies, engines, gitHubActionCacheKey}' package.json > tmp/package-ci.json

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: tmp/package-ci.json

      - run: |
          case $PR_ACTION in
            all|refcache*|text)
              npm install --omit=optional
              ;&
            *)
              npm run fix:$PR_ACTION
              ;;
          esac
          git status
          git branch -v

      - name: Commit and push changes, if any
        run: |
          git config --local user.email "$USER_EMAIL"
          git config --local user.name "$USER_NAME"
          if [[ $(git status --porcelain) ]]; then
            git add -A
            current_branch=$(git rev-parse --abbrev-ref HEAD)
            echo current_branch=$current_branch
            # gh pr checkout sets some git configs that we can use to make sure
            # we push to the right repo & to the right branch
            remote_repo=$(git config --get branch.${current_branch}.remote)
            echo remote_repo=$remote_repo
            remote_branch=$(git config --get branch.${current_branch}.merge)
            echo remote_branch=$remote_branch
            git commit -m "Results from /fix:${PR_ACTION}"
            git push ${remote_repo} HEAD:${remote_branch}
          else
            echo "No changes to commit"
          fi
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}

      - name: Report success and ask to run full checks
        if: ${{ !failure() && !cancelled() }}
        run: |
          gh pr comment $PR_NUM --body "$(cat <<EOF
          \`fix:${PR_ACTION}\` was [successful]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID).
          ### IMPORTANT: (RE-)RUN \`/fix:all\` to ensure that there are no remaining check issues.
          EOF
          )"
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}

      - name: Report an error in the case of failure
        if: ${{ failure() || cancelled() }}
        run: |
          gh pr comment $PR_NUM -b "fix:${PR_ACTION} failed or was cancelled. For details, see $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID."
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}

  nudge-action:
    name: Rerun PR checks
    runs-on: ubuntu-latest

    if: |
      github.event.issue.pull_request &&
      github.event.comment.body == '/nudge'
    permissions:
      contents: read
      pull-requests: write
      actions: write

    steps:
      - name: Context info
        run: |
          echo $PR_NUM
          echo $COMMENT
        env:
          PR_NUM: ${{ github.event.issue.number }}
          COMMENT: ${{ github.event.comment.body }}

      - name: Write start comment
        run: |
          gh pr comment $PR_NUM -b "You triggered /nudge action run at $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}
          PR_NUM: ${{ github.event.issue.number }}

      - name: Rerun PR checks
        run: |
          # Get the PR head SHA and branch name
          PR_HEAD_SHA=$(gh pr view $PR_NUM --json headRefOid -q .headRefOid)
          PR_BRANCH=$(gh pr view $PR_NUM --json headRefName -q .headRefName)
          
          echo "PR #$PR_NUM"
          echo "Head SHA: $PR_HEAD_SHA"
          echo "Branch: $PR_BRANCH"
          
          # Find workflow runs for this PR that need to be re-run
          echo "Finding workflow runs for PR #$PR_NUM..."
          
          # First try to get runs for the exact SHA
          echo "Looking for runs with exact SHA: $PR_HEAD_SHA"
          WORKFLOW_RUNS=$(gh run list --limit 30 --json name,headSha,event,databaseId,conclusion,status \
            --jq '.[] | select(.headSha=="'$PR_HEAD_SHA'" and .event=="pull_request") | "\(.databaseId)|\(.name)|\(.conclusion)|\(.status)"')
          
          # If no runs found with exact SHA, try by branch name
          if [ -z "$WORKFLOW_RUNS" ]; then
            echo "No workflow runs found for SHA $PR_HEAD_SHA, trying branch: $PR_BRANCH"
            WORKFLOW_RUNS=$(gh run list --branch $PR_BRANCH --limit 30 --json name,databaseId,conclusion,status \
              --jq '.[] | "\(.databaseId)|\(.name)|\(.conclusion)|\(.status)"')
          fi
          
          # Check if we found any workflows
          if [ -z "$WORKFLOW_RUNS" ]; then
            echo "No workflow runs found for this PR"
            exit 1
          fi
          
          # Print the workflows we found
          echo "Found the following workflow runs:"
          echo "$WORKFLOW_RUNS" | while IFS="|" read -r RUN_ID NAME CONCLUSION STATUS; do
            echo "- $NAME (ID: $RUN_ID): Status=$STATUS, Conclusion=$CONCLUSION"
          done
          
          # Rerun each completed workflow
          echo ""
          echo "Re-running workflows:"
          echo "$WORKFLOW_RUNS" | while IFS="|" read -r RUN_ID NAME CONCLUSION STATUS; do
            if [ "$STATUS" = "completed" ]; then
              echo "Re-running workflow: $NAME (ID: $RUN_ID)"
              RERUN_RESULT=$(gh run rerun $RUN_ID)
              echo "Result: $RERUN_RESULT"
            elif [ "$STATUS" = "in_progress" ]; then
              echo "Workflow $NAME (ID: $RUN_ID) is already running, skipping"
            else
              echo "Cannot rerun workflow $NAME (ID: $RUN_ID) with status: $STATUS"
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}
          PR_NUM: ${{ github.event.issue.number }}

      - name: Report success
        if: ${{ !failure() && !cancelled() }}
        run: |
          gh pr comment $PR_NUM --body "$(cat <<EOF
          \`/nudge\` has re-run available checks for PR #$PR_NUM.
          You can check the status of your PR checks in the [PR's Checks tab](https://github.com/$GITHUB_REPOSITORY/pull/$PR_NUM/checks).
          EOF
          )"
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}
          PR_NUM: ${{ github.event.issue.number }}

      - name: Report an error in the case of failure
        if: ${{ failure() || cancelled() }}
        run: |
          gh pr comment $PR_NUM -b "/nudge failed or was cancelled. For details, see $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID."
        env:
          GH_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}
          PR_NUM: ${{ github.event.issue.number }}
